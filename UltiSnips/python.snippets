
snippet 'if\s' "If block" bAr
if ${1}:
	${2:${VISUAL}}

endsnippet

snippet ife "If else block" bA
if ${1}:
	${2:${VISUAL}}
else:
	${3}

endsnippet

snippet def "def func" bA
def ${1}(self${2:, }):
	${3:${VISUAL}}

endsnippet	

snippet try "Try except block" b
try:
	${2:${VISUAL}}
except ${1:KeyboardInterrupt}:
	print("$1")

endsnippet

post_jump "create_dynamic_tabstops(snip)"
snippet class "Class definition" bA
`!p
snip.rv = snip.mkline("class $1(${2:Object}):\n")
snip >> 1
snip += "def __init__(self${3:, $4}):"
snip >> 1
indent = snip.indent
snip.reset_indent()
snip += "${4/[\W]*(\w+)[\W]*/" +indent+ "self.$1 = $1\n/g}"
`
endsnippet

snippet main "if name == main block" bA
def main():
	${1:pass}

if __name__ == '__main__':
	main()

endsnippet

snippet todo "Todo comment" bA
# TODO $1
endsnippet

global !p
def create_dynamic_tabstops(snip):
	anon_snippet_body = ""
	start = snip.snippet_start[0]
	end = snip.snippet_end[0]
	# Append current line into anonymous snippet
	for i in range(start, end + 1):
		anon_snippet_body += snip.buffer[i]

		anon_snippet_body += "" if i == end else "\n"
	# Delete expanded snippet line till second to last line
	for i in range(start, end):
		del snip.buffer[start]
	# Empty last expanded snippet line while preserving the line
	snip.buffer[start] = ''
	# Expand anonymous snippet
	snip.expand_anon(anon_snippet_body)
endglobal
